<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Execute backup execution completed" xml:space="preserve">
    <value>Execution du travail de sauvegarde terminé</value>
  </data>
  <data name="Create backup job" xml:space="preserve">
    <value>=== Créer un travail de sauvegarde ===</value>
  </data>
  <data name="Create job name" xml:space="preserve">
    <value>Entrez le nom du travail</value>
  </data>
  <data name="Create job path" xml:space="preserve">
    <value>Entrez le chemin du fichier source</value>
  </data>
  <data name="Create job target" xml:space="preserve">
    <value>Entrez le chemin du fichier ciblé</value>
  </data>
  <data name="Create job type" xml:space="preserve">
    <value>Entrez le type de sauvegarde (Complete/Differentiel)</value>
  </data>
  <data name="Execute backup enter job id" xml:space="preserve">
    <value>Entrez l'id des travaux de sauvegarde pour executer (1 ;3 / 1-3):</value>
  </data>
  <data name="Execute backup job" xml:space="preserve">
    <value>=== Executer un travail de sauvegarde ===</value>
  </data>
  <data name="Execute backup no available" xml:space="preserve">
    <value>Aucun travail de sauvegarde disponible</value>
  </data>
  <data name="Execute backup no job select" xml:space="preserve">
    <value>Aucun travail sélectionné</value>
  </data>
  <data name="Execute backup no valid id" xml:space="preserve">
    <value>Aucun id valide de travail entré</value>
  </data>
  <data name="Execute backup print list" xml:space="preserve">
    <value>Travaux de sauvegarde disponibles:</value>
  </data>
  <data name="Job name already exists" xml:space="preserve">
    <value>Nom de travail déjà existant</value>
  </data>
  <data name="job type complete" xml:space="preserve">
    <value>Complete</value>
  </data>
  <data name="job type differential" xml:space="preserve">
    <value>Differentiel</value>
  </data>
  <data name="job type error" xml:space="preserve">
    <value>Type invalide. Entrez 'Complete' ou 'Differentiel'</value>
  </data>
  <data name="Main menu create" xml:space="preserve">
    <value>1. Créer un travail de sauvegarde</value>
  </data>
  <data name="Main menu execute" xml:space="preserve">
    <value>2. Executer un travail de sauvegarde</value>
  </data>
  <data name="Main menu exit" xml:space="preserve">
    <value>4. Quitter</value>
  </data>
  <data name="Main menu list" xml:space="preserve">
    <value>3. Lister les travaux de sauvegarde</value>
  </data>
  <data name="Main menu select language" xml:space="preserve">
    <value>5. Sélectionner la langue FR/EN</value>
  </data>
  <data name="Main menu select option" xml:space="preserve">
    <value>Sélectionnez une option : </value>
  </data>
  <data name="Maximum job create" xml:space="preserve">
    <value>Vous avez atteins le nombre maximum de travaux de sauvegarde (5).</value>
  </data>
  <data name="Select language" xml:space="preserve">
    <value>Pour sélectionner la langue entrez 'FR' ou 'EN'</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>=== EasySave Menu Principal ===</value>
  </data>
  <data name="Execute backup executing error" xml:space="preserve">
    <value>Erreur d'execution du travail de sauvegarde</value>
  </data>
  <data name="List job title" xml:space="preserve">
    <value>=== Liste des travaux de sauvegarde ===</value>
  </data>
  <data name="List job no backup available" xml:space="preserve">
    <value>Aucun travail de sauvegarde disponible</value>
  </data>
  <data name="List job input empty" xml:space="preserve">
    <value>L'entrée ne peut pas être vide. Essayez encore:</value>
  </data>
</root>
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

// Logger DLL (externe)
public static class Logger
{
    public static void Log(string message)
    {
        Console.WriteLine($"[LOG] {DateTime.Now:yyyy-MM-dd HH:mm:ss}: {message}");
    }

    public static void LogError(string errorMessage)
    {
        Console.WriteLine($"[ERROR] {DateTime.Now:yyyy-MM-dd HH:mm:ss}: {errorMessage}");
    }
}

// Gestionnaire d'Ã©tat
public static class StateWriter
{
    public static void UpdateState(string jobName, string status, double progress)
    {
        try
        {
            File.WriteAllText("state.json", 
                $"{{\"job\": \"{jobName}\", \"status\": \"{status}\", \"progress\": {progress}, \"timestamp\": \"{DateTime.Now:O}\"}}");
        }
        catch (Exception ex)
        {
            Logger.LogError($"Failed to update state: {ex.Message}");
        }
    }
}

// Gestionnaire de fichiers
public static class FileSystem
{
    public static IEnumerable<string> GetAllFiles(string path)
    {
        if (string.IsNullOrWhiteSpace(path))
            throw new ArgumentException("Path cannot be null or empty", nameof(path));

        if (!Directory.Exists(path))
            throw new DirectoryNotFoundException($"Directory not found: {path}");

        return Directory.EnumerateFiles(path, "*", SearchOption.AllDirectories);
    }

    public static IEnumerable<string> GetModifiedFilesSince(string path, DateTime since)
    {
        return GetAllFiles(path).Where(f => File.GetLastWriteTime(f) > since);
    }

    public static void CopyFile(string source, string target)
    {
        if (string.IsNullOrWhiteSpace(source))
            throw new ArgumentException("Source path cannot be null or empty", nameof(source));
        
        if (string.IsNullOrWhiteSpace(target))
            throw new ArgumentException("Target path cannot be null or empty", nameof(target));

        if (!File.Exists(source))
            throw new FileNotFoundException($"Source file not found: {source}");

        var targetDir = Path.GetDirectoryName(target);
        if (!string.IsNullOrWhiteSpace(targetDir))
        {
            Directory.CreateDirectory(targetDir);
        }

        File.Copy(source, target, true);
        Logger.Log($"File copied from {source} to {target}");
    }
}

// Travail de sauvegarde
public class BackupJob
{
    public int Id { get; set; }
    public required string Name { get; set; }
    public required string SourcePath { get; set; }
    public required string TargetPath { get; set; }
    public required string Type { get; set; } // "Complete" ou "Differential"

    public void Execute()
    {
        try
        {
            Logger.Log($"Starting backup job {Id} - {Name}");
            StateWriter.UpdateState(Name, "Active", 0);

            if (Type == "Complete")
            {
                ExecuteCompleteBackup();
                UpdateLastCompleteBackupDate();
            }
            else if (Type == "Differential")
            {
                ExecuteDifferentialBackup();
            }
            else
            {
                throw new InvalidOperationException($"Unknown backup type: {Type}");
            }

            StateWriter.UpdateState(Name, "Completed", 100);
            Logger.Log($"Backup job {Name} completed successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error in backup job {Name}: {ex.Message}");
            StateWriter.UpdateState(Name, "Failed", 0);
            throw;
        }
    }

    private void ExecuteCompleteBackup()
    {
        var files = FileSystem.GetAllFiles(SourcePath).ToList();
        Logger.Log($"Found {files.Count} files to backup");

        for (int i = 0; i < files.Count; i++)
        {
            string relativePath = files[i][SourcePath.Length..].TrimStart(Path.DirectorySeparatorChar);
            string targetFile = Path.Combine(TargetPath, relativePath);

            FileSystem.CopyFile(files[i], targetFile);

            double progress = (i + 1) * 100.0 / files.Count;
            StateWriter.UpdateState(Name, "InProgress", progress);
        }
    }

    private void ExecuteDifferentialBackup()
    {
        DateTime lastCompleteBackup = GetLastCompleteBackupDate();
        Logger.Log($"Last complete backup was at {lastCompleteBackup}");

        var modifiedFiles = FileSystem.GetModifiedFilesSince(SourcePath, lastCompleteBackup).ToList();
        Logger.Log($"Found {modifiedFiles.Count} modified files to backup");

        for (int i = 0; i < modifiedFiles.Count; i++)
        {
            string relativePath = modifiedFiles[i][SourcePath.Length..].TrimStart(Path.DirectorySeparatorChar);
            string targetFile = Path.Combine(TargetPath, relativePath);

            FileSystem.CopyFile(modifiedFiles[i], targetFile);

            double progress = (i + 1) * 100.0 / modifiedFiles.Count;
            StateWriter.UpdateState(Name, "InProgress", progress);
        }
    }

    private DateTime GetLastCompleteBackupDate()
    {
        const string backupDateFile = "last_complete_backup.txt";
        
        if (File.Exists(backupDateFile))
        {
            try
            {
                return DateTime.Parse(File.ReadAllText(backupDateFile));
            }
            catch
            {
                Logger.LogError("Failed to read last backup date, using default");
            }
        }
        return DateTime.MinValue;
    }

    private void UpdateLastCompleteBackupDate()
    {
        const string backupDateFile = "last_complete_backup.txt";
        try
        {
            File.WriteAllText(backupDateFile, DateTime.Now.ToString("O"));
        }
        catch (Exception ex)
        {
            Logger.LogError($"Failed to update last backup date: {ex.Message}");
        }
    }
}

// Gestionnaire de sauvegarde
public class BackupManager
{
    private readonly List<BackupJob> _jobs = new();
    private int _nextId = 1;

    public BackupJob CreateJob(string name, string source, string target, string type)
    {
        if (string.IsNullOrWhiteSpace(name))
            throw new ArgumentException("Job name cannot be null or empty", nameof(name));

        if (string.IsNullOrWhiteSpace(source))
            throw new ArgumentException("Source path cannot be null or empty", nameof(source));

        if (string.IsNullOrWhiteSpace(target))
            throw new ArgumentException("Target path cannot be null or empty", nameof(target));

        if (string.IsNullOrWhiteSpace(type) || (type != "Complete" && type != "Differential"))
            throw new ArgumentException("Type must be either 'Complete' or 'Differential'", nameof(type));

        var job = new BackupJob
        {
            Id = _nextId++,
            Name = name,
            SourcePath = Path.GetFullPath(source),
            TargetPath = Path.GetFullPath(target),
            Type = type
        };

        _jobs.Add(job);
        Logger.Log($"Created new backup job: {name} (ID: {job.Id})");
        StateWriter.UpdateState(name, "Created", 0);

        return job;
    }

    public void ExecuteJobs(IEnumerable<int> jobIds)
    {
        if (jobIds == null)
            throw new ArgumentNullException(nameof(jobIds));

        foreach (var id in jobIds)
        {
            var job = _jobs.FirstOrDefault(j => j.Id == id);
            if (job == null)
            {
                Logger.LogError($"Backup job with ID {id} not found");
                continue;
            }

            try
            {
                job.Execute();
            }
            catch (Exception ex)
            {
                Logger.LogError($"Failed to execute backup job {job.Name}: {ex.Message}");
            }
        }
    }

    public IEnumerable<BackupJob> GetAllJobs() => _jobs.AsReadOnly();
}

// Gestionnaire de langue
public class LanguageManager
{
    private string _currentLanguage = "EN";

    public void SetLanguage(string language)
    {
        if (string.IsNullOrWhiteSpace(language))
            throw new ArgumentException("Language cannot be null or empty", nameof(language));

        _currentLanguage = language.ToUpper() switch
        {
            "FR" => "FR",
            "EN" => "EN",
            _ => throw new ArgumentException("Unsupported language", nameof(language))
        };

        Logger.Log($"Language set to: {_currentLanguage}");
    }

    public string GetCurrentLanguage() => _currentLanguage;
}

// Application console
public class ConsoleApp
{
    private readonly LanguageManager _languageManager = new();
    private readonly BackupManager _backupManager = new();

    public void Run()
    {
        try
        {
            InitializeLanguage();
            MainMenuLoop();
        }
        catch (Exception ex)
        {
            Logger.LogError($"Fatal error: {ex.Message}");
            Console.WriteLine("A fatal error occurred. Please check the logs.");
        }
    }

    private void InitializeLanguage()
    {
        Console.WriteLine("Select your preferred language (EN/FR):");
        string? input;
        do
        {
            input = Console.ReadLine()?.Trim();
            if (string.IsNullOrEmpty(input))
            {
                Console.WriteLine("Language cannot be empty. Please enter EN or FR:");
                continue;
            }

            try
            {
                _languageManager.SetLanguage(input);
                break;
            }
            catch (ArgumentException ex)
            {
                Console.WriteLine(ex.Message);
                Console.WriteLine("Please enter EN or FR:");
            }
        } while (true);
    }

    private void MainMenuLoop()
    {
        while (true)
        {
            DisplayMainMenu();
            var input = Console.ReadLine()?.Trim();

            switch (input)
            {
                case "1":
                    CreateBackupJob();
                    break;
                case "2":
                    ExecuteBackupJobs();
                    break;
                case "3":
                    ListBackupJobs();
                    break;
                case "4":
                    Environment.Exit(0);
                    break;
                default:
                    Console.WriteLine("Invalid option. Please try again.");
                    break;
            }
        }
    }

    private void DisplayMainMenu()
    {
        Console.WriteLine("\n=== EasySave Backup ===");
        Console.WriteLine("1. Create backup job");
        Console.WriteLine("2. Execute backup jobs");
        Console.WriteLine("3. List backup jobs");
        Console.WriteLine("4. Exit");
        Console.Write("Select an option: ");
    }

    private void CreateBackupJob()
    {
        Console.WriteLine("\n=== Create Backup Job ===");

        string name = GetUserInput("Enter job name:");
        string source = GetUserInput("Enter source path:");
        string target = GetUserInput("Enter target path:");
        
        string type;
        do
        {
            type = GetUserInput("Enter backup type (Complete/Differential):").Trim();
            if (type != "Complete" && type != "Differential")
            {
                Console.WriteLine("Invalid type. Please enter 'Complete' or 'Differential'");
            }
        } while (type != "Complete" && type != "Differential");

        try
        {
            _backupManager.CreateJob(name, source, target, type);
            Console.WriteLine($"Backup job '{name}' created successfully!");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating backup job: {ex.Message}");
        }
    }

    private void ExecuteBackupJobs()
    {
        Console.WriteLine("\n=== Execute Backup Jobs ===");
        var jobs = _backupManager.GetAllJobs().ToList();

        if (!jobs.Any())
        {
            Console.WriteLine("No backup jobs available.");
            return;
        }

        Console.WriteLine("Available backup jobs:");
        foreach (var job in jobs)
        {
            Console.WriteLine($"{job.Id}: {job.Name} ({job.Type})");
        }

        Console.WriteLine("Enter job IDs to execute (comma separated):");
        var input = Console.ReadLine()?.Trim();

        if (string.IsNullOrWhiteSpace(input))
        {
            Console.WriteLine("No jobs selected.");
            return;
        }

        var jobIds = input.Split(',')
            .Select(idStr => int.TryParse(idStr.Trim(), out int id) ? id : -1)
            .Where(id => id > 0)
            .ToList();

        if (!jobIds.Any())
        {
            Console.WriteLine("No valid job IDs entered.");
            return;
        }

        try
        {
            _backupManager.ExecuteJobs(jobIds);
            Console.WriteLine("Backup jobs execution completed.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error executing backup jobs: {ex.Message}");
        }
    }

    private void ListBackupJobs()
    {
        Console.WriteLine("\n=== Backup Jobs List ===");
        var jobs = _backupManager.GetAllJobs().ToList();

        if (!jobs.Any())
        {
            Console.WriteLine("No backup jobs available.");
            return;
        }

        foreach (var job in jobs)
        {
            Console.WriteLine($"ID: {job.Id}");
            Console.WriteLine($"Name: {job.Name}");
            Console.WriteLine($"Source: {job.SourcePath}");
            Console.WriteLine($"Target: {job.TargetPath}");
            Console.WriteLine($"Type: {job.Type}");
            Console.WriteLine();
        }
    }

    private static string GetUserInput(string prompt)
    {
        Console.WriteLine(prompt);
        string? input;
        do
        {
            input = Console.ReadLine()?.Trim();
            if (string.IsNullOrEmpty(input))
            {
                Console.WriteLine("Input cannot be empty. Please try again:");
            }
        } while (string.IsNullOrEmpty(input));

        return input;
    }
}

// Programme principal
class Program
{
    static void Main(string[] args)
    {
        Console.WriteLine("=== EasySave Backup Application ===");
        Console.WriteLine("Version 1.0\n");

        try
        {
            var app = new ConsoleApp();
            app.Run();
        }
        catch (Exception ex)
        {
            Logger.LogError($"Application crashed: {ex}");
            Console.WriteLine("A critical error occurred. The application will now close.");
            Console.WriteLine("Error details have been logged.");
        }
    }
}
